parameters:
  buildConfig: ''
  osGroup: ''
  osSubgroup: ''
  archType: ''
  targetRid: ''
  framework: 'net9.0'
  isOfficialBuild: false
  liveRuntimeBuildConfig: ''
  runtimeFlavor: 'coreclr'
  runtimeDisplayName: 'coreclr'
  interpreter: ''
  timeoutInMinutes: 150
  pool: ''
  runtimeVariant: ''
  testScope: ''
  helixQueues: []
  dependOnEvaluatePaths: false
  condition: true
  shouldContinueOnError: false
  variables: {}
  # coreclrTestGroup: if empty, then a normal, default test run is created. If set, it indicates a set of
  # stress modes that each test will be run with. This is the same usage as 'testGroup' in
  # eng/pipelines/common/templates/runtimes/run-test-job.yml.
  coreclrTestGroup: ''
  SuperPmiCollect: false
  SuperPmiCollectionType: 'run'
  SuperPmiCollectionName: 'libraries_tests'
  dependsOn: []

jobs:
  - template: /eng/pipelines/libraries/base-job.yml
    parameters:
      buildConfig: ${{ parameters.buildConfig }}
      osGroup:  ${{ parameters.osGroup }}
      osSubgroup:  ${{ parameters.osSubgroup }}
      archType:  ${{ parameters.archType }}
      crossBuild: ${{ parameters.crossBuild }}
      framework:  ${{ parameters.framework }}
      isOfficialBuild: ${{ parameters.isOfficialBuild }}
      liveRuntimeBuildConfig: ${{ parameters.liveRuntimeBuildConfig }}
      runtimeFlavor: ${{ parameters.runtimeFlavor }}
      runtimeVariant: ${{ parameters.runtimeVariant }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      container: ${{ parameters.container }}
      condition: ${{ parameters.condition }}
      testScope: ${{ parameters.testScope }}
      SuperPmiCollect: ${{ parameters.SuperPmiCollect }}
      runTests: true
      ${{ if eq(parameters.SuperPmiCollect, true) }}:
        displayName: ${{ format('SuperPMI collection {0} {1} {2}', parameters.SuperPmiCollectionName, parameters.liveRuntimeBuildConfig, parameters.runtimeDisplayName) }}
        name: ${{ format('spmi_{0}_{1}_{2}', parameters.SuperPmiCollectionName, parameters.liveRuntimeBuildConfig, parameters.runtimeDisplayName) }}
      ${{ else }}:
        ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
          displayName: ${{ format('Test Run {0} {1}', parameters.liveRuntimeBuildConfig, parameters.runtimeDisplayName) }}
          name: ${{ format('test_run_{0}_{1}', parameters.liveRuntimeBuildConfig, parameters.runtimeDisplayName) }}
        ${{ if eq(parameters.liveRuntimeBuildConfig, '') }}:
          displayName: 'Test Run'
          name: test_run
      ${{ if eq(parameters.interpreter, 'true') }}:
        testDisplayName: ${{ parameters.runtimeFlavor }}_interpreter_${{ parameters.liveRuntimeBuildConfig }}

      # To run the tests we just send to helix and wait, use ubuntu hosted pools for faster providing and to not back up our build pools
      pool: ${{ parameters.pool }}

      dependOnEvaluatePaths: ${{ parameters.dependOnEvaluatePaths }}
      dependsOn:
      - ${{ if ne(parameters.dependsOn[0], '') }}:
        - ${{ parameters.dependsOn }}
      - ${{ if eq(parameters.dependsOn[0], '') }}:
        - ${{ format('libraries_build_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
          - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', parameters.runtimeFlavor, parameters.runtimeVariant, parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.liveRuntimeBuildConfig) }}
      # SuperPMI collection needs to run mcs.exe on the AzDO machine. Assume that's an x64 machine, and download an x64 product build if needed.
      - ${{ if and(eq(parameters.SuperPmiCollect, true), ne(parameters.archType, 'x64')) }}:
          - ${{ format('{0}_{1}_product_build_{2}{3}_{4}_{5}', 'coreclr', '', parameters.osGroup, parameters.osSubgroup, 'x64', parameters.liveRuntimeBuildConfig) }}

      variables:

        - librariesTestsArtifactName: ${{ format('libraries_test_assets_{0}{1}_{2}_{3}', parameters.osGroup, parameters.osSubgroup, parameters.archType, parameters.buildConfig) }}
        - _archiveTestsParameter: /p:ArchiveTests=true

        - ${{ if eq(parameters.SuperPmiCollect, true) }}:
          - template: /eng/pipelines/coreclr/templates/jit-python-variables.yml
            parameters:
              osGroup: ${{ parameters.osGroup }}
          - template: /eng/pipelines/libraries/superpmi-collect-variables.yml
            parameters:
              buildConfig: ${{ parameters.buildConfig }}
              osGroup: ${{ parameters.osGroup }}
              archType: ${{ parameters.archType }}
              runtimeFlavor: ${{ parameters.runtimeFlavor }}

        - ${{ parameters.variables }}

      steps:

        # SuperPMI collection: Download x64 coreclr if running on non-x64 configuration (needed for mcs.exe on AzDO machine; see `SuperPmiMcsPath`.
        - ${{ if and(eq(parameters.SuperPmiCollect, true), ne(parameters.archType, 'x64')) }}:
          - template: /eng/pipelines/common/download-artifact-step.yml
            parameters:
              unpackFolder: $(_runtimeX64DownloadPath)
              artifactFileName: 'CoreCLRProduct__${{ parameters.osGroup }}${{ parameters.osSubgroup }}_x64_${{ parameters.liveRuntimeBuildConfig }}$(archiveExtension)'
              artifactName: 'CoreCLRProduct__${{ parameters.osGroup }}${{ parameters.osSubgroup }}_x64_${{ parameters.liveRuntimeBuildConfig }}'
              displayName: 'CoreCLR product build (x64)'

        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            displayName: Build Assets
            cleanUnpackFolder: false
            artifactName: $(librariesBuildArtifactName)
            artifactFileName: $(librariesBuildArtifactName)$(archiveExtension)
            unpackFolder: $(Build.SourcesDirectory)/artifacts

        - template: /eng/pipelines/common/download-artifact-step.yml
          parameters:
            displayName: Test Assets
            cleanUnpackFolder: false
            artifactName: $(librariesTestsArtifactName)
            artifactFileName: $(librariesTestsArtifactName)$(archiveExtension)
            unpackFolder: $(Build.SourcesDirectory)/artifacts

        - ${{ if in(parameters.osGroup, 'osx', 'maccatalyst', 'ios', 'iossimulator', 'tvos', 'tvossimulator') }}:
          - script: $(Build.SourcesDirectory)/eng/install-native-dependencies.sh ${{ parameters.osGroup }}
            displayName: Install Build Dependencies

        - ${{ if ne(parameters.liveRuntimeBuildConfig, '') }}:
          - script: $(_buildScript)
                    -subset host.native+libs.pretest
                    $(_buildArguments)
                    /p:RuntimeFlavor=${{ parameters.runtimeFlavor }}
                    /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/overrideRuntimeFromLiveDrop.binlog
            displayName: Prepare TestHost with runtime $(runtimeFlavorName)

        - template: /eng/pipelines/libraries/helix.yml
          parameters:
            runtimeFlavor: ${{ parameters.runtimeFlavor }}
            osGroup: ${{ parameters.osGroup }}
            targetRid: ${{ parameters.targetRid }}
            archType: ${{ parameters.archType }}
            buildConfig: ${{ parameters.buildConfig }}
            helixQueues: ${{ parameters.helixQueues }}
            testScope: ${{ parameters.testScope }}
            interpreter: ${{ parameters.interpreter }}
            shouldContinueOnError: ${{ parameters.shouldContinueOnError }}
            creator: dotnet-bot
            testRunNamePrefixSuffix: $(_testRunNamePrefixSuffix)
            SuperPmiCollect: ${{ parameters.SuperPmiCollect }}
            SuperPmiCollectionType: ${{ parameters.SuperPmiCollectionType }}
            SuperPmiCollectionName: ${{ parameters.SuperPmiCollectionName }}

            ${{ if in(parameters.coreclrTestGroup, 'superpmi_collection') }}:
              scenarios:
              - normal
            ${{ if in(parameters.coreclrTestGroup, 'superpmi_collection_no_tiered_compilation') }}:
              scenarios:
              - no_tiered_compilation

        - ${{ if eq(parameters.SuperPmiCollect, true) }}:
          - template: /eng/pipelines/libraries/superpmi-postprocess-step.yml
            parameters:
              buildConfig: ${{ parameters.buildConfig }}
              buildConfigUpper: $(buildConfigUpper)
              osGroup: ${{ parameters.osGroup }}
              osSubgroup: ${{ parameters.osSubgroup }}
              archType: ${{ parameters.archType }}
              SuperPmiCollectionType: ${{ parameters.SuperPmiCollectionType }}
              SuperPmiCollectionName: ${{ parameters.SuperPmiCollectionName }}
              MergedMchFileLocation: $(MergedMchFileLocation)
              MchFilesLocation: $(MchFilesLocation)
              SpmiLogsLocation: $(SpmiLogsLocation)
              SuperPmiMcsPath: $(SuperPmiMcsPath)
              PythonSetupScript: $(PythonSetupScript)
              PythonScript: $(PythonScript)
              PipScript: $(PipScript)
